name: Shuangseqiu Data and Analysis

on:
  schedule:
    # UTC时间周日、周二、周四的 22:00，对应北京时间周一、周三、周五的 6:00
    - cron: '0 22 * * 0,2,4'
  workflow_dispatch:

# 为GitHub Actions添加必要的权限
permissions:
  contents: write        # 允许读写仓库内容
  actions: read         # 允许读取Actions
  checks: write         # 允许写入检查状态
  pull-requests: write  # 允许操作PR（如果需要）

jobs:
  daily_process:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Shanghai # Set timezone for consistent date/time operations

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Fetch all history for git operations
        # token: ${{ secrets.PAT_FOR_CHECKOUT_AND_PUSH }} # Optional: If GITHUB_TOKEN has permission issues for subsequent pushes or certain repo setups. Usually GITHUB_TOKEN is fine.

    - name: Set up Python 3.9
      uses: actions/setup-python@v5
      with:
        python-version: 3.9

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run data acquisition script
      run: python ssq_data_processor.py

    - name: Run bonus calculation script
      run: python ssq_bonus_calculation.py
      
    - name: Run analysis script
      run: python ssq_analyzer.py

    - name: Create fixed filename copy of latest analysis report
      run: |
        set -e
        latest_report_file=$(find . -maxdepth 1 -name 'ssq_analysis_output_*.txt' -print0 | xargs -0 ls -1 | sort -r | head -n 1)
        if [ -n "$latest_report_file" ] && [ -f "$latest_report_file" ]; then
          cp "$latest_report_file" "latest_ssq_analysis.txt"
          echo "Created fixed filename copy: latest_ssq_analysis.txt from $latest_report_file"
        else
          echo "No ssq_analysis_output_*.txt files found, or latest_report_file variable is empty. Skipping copy."
        fi

    - name: Clean old reports - keep only latest 3
      run: |
        set -e
        echo "--- Cleaning old analysis reports ---"
        mapfile -t reports < <(find . -maxdepth 1 -name 'ssq_analysis_output_*.txt' -print0 | xargs -0 ls -1 | sort)
        count=${#reports[@]}
        keep=3
        echo "Found $count reports. Configured to keep $keep latest."
        if [ "$count" -gt "$keep" ]; then
          num_to_delete=$((count - keep))
          echo "Deleting $num_to_delete oldest reports:"
          for i in $(seq 0 $((num_to_delete - 1))); do
            report_to_delete="${reports[$i]}"
            if [ -f "$report_to_delete" ]; then
              echo "Removing: $report_to_delete"
              rm "$report_to_delete"
            else
              echo "Skipping (not found): $report_to_delete"
            fi
          done
        else
          echo "No cleanup needed. $count report(s) found (≤ $keep)."
        fi
        echo "Listing remaining analysis reports:"
        find . -maxdepth 1 -name 'ssq_analysis_output_*.txt' | sort
        echo "--- Finished cleaning reports ---"

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Commit updated files
      run: |
        set -e
        echo "--- Staging and Committing Files ---"
        
        # 首先添加已跟踪文件的更改
        git add -u
        
        # 定义需要提交的文件列表
        files_to_commit=(
          "shuangseqiu.csv"
          "latest_ssq_analysis.txt"
          "latest_ssq_calculation.txt"
          "weights_config.json"
        )
        
        # 逐个检查并添加文件，处理.gitignore的情况
        for file_path in "${files_to_commit[@]}"; do
          if [ -f "$file_path" ]; then
            # 检查文件是否被.gitignore忽略
            if git check-ignore "$file_path" > /dev/null 2>&1; then
              echo "Warning: $file_path is ignored by .gitignore, force adding..."
              git add -f "$file_path"
            else
              git add "$file_path"
            fi
            echo "Staged: $file_path"
          else
            echo "Skipping (not found): $file_path"
          fi
        done
        
        # 添加新的分析报告文件
        find . -maxdepth 1 -name 'ssq_analysis_output_*.txt' -print0 | xargs -0 -r git add
        echo "Staged any new ssq_analysis_output_*.txt files."
        
        # 显示当前状态
        echo "Current git status:"
        git status --porcelain
        
        # 检查是否有更改需要提交
        if git diff --staged --quiet; then
          echo "No changes to commit."
        else
          git commit -m "🤖 Auto update: Data and Analysis results $(date +'%Y-%m-%d %H:%M:%S %Z')"
          echo "Changes committed successfully."
        fi
        echo "--- Finished Staging and Committing ---"

    - name: Pull remote changes to sync before push
      run: |
        set -e
        echo "--- Syncing with Remote Repository ---"
        echo "Current branch: $(git rev-parse --abbrev-ref HEAD)"
        echo "Target branch from GITHUB_REF_NAME: ${{ github.ref_name }}"
        echo "Remote URL: $(git remote get-url origin)"
        
        # 配置Git认证（为pull操作）
        git config --local url."https://oauth2:${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "https://github.com/"
        
        # Set pull strategy to merge (default, but explicit) or rebase
        git config pull.rebase false # Use 'true' for rebase, 'false' for merge
        
        # 检查远程分支是否存在
        if git ls-remote --exit-code --heads origin ${{ github.ref_name }} >/dev/null 2>&1; then
          echo "Remote branch exists, pulling changes..."
          git pull origin ${{ github.ref_name }} --no-edit
          echo "Successfully pulled and merged remote changes (if any)."
        else
          echo "Remote branch does not exist, will create it on first push."
        fi
        echo "--- Finished Syncing ---"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Push changes
      run: |
        set -e
        echo "--- Pushing Changes to Remote ---"
        
        # 配置Git认证使用GITHUB_TOKEN
        git config --local url."https://oauth2:${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "https://github.com/"
        
        # 检查是否有更改需要推送
        if git diff --quiet HEAD^ HEAD 2>/dev/null || [ -z "$(git log --oneline origin/${{ github.ref_name }}..HEAD 2>/dev/null)" ]; then
          echo "No changes to push or already up to date."
        else
          echo "Pushing changes to ${{ github.ref_name }}..."
          git push origin ${{ github.ref_name }}
          echo "Successfully pushed changes to remote repository."
        fi
        echo "--- Finished Pushing Changes ---"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
